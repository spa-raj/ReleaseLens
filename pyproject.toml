[project]
name = "releaselens"
version = "0.1.0"
description = "GitHub-integrated assistant that analyzes dependency upgrades and their code impact"
authors = [
    {name = "Sparsh Raj", email = "sparsh.raj30@gmail.com"}
]
requires-python = ">=3.9"
license = {text = "Apache-2.0 license"}
readme = "README.md"
keywords = ["dependency", "upgrade", "analysis", "github", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11", 
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # Core Framework (latest 2025 versions)
    "fastapi>=0.116.1",
    "uvicorn[standard]>=0.35.0",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    
    # Agent Framework
    "langgraph>=0.6.6",
    "langchain>=0.3.27",
    
    # Code Analysis
    "libcst>=1.8.2",
    "parso>=0.8.0",
    
    # Observability
    "arize>=7.49.0",
    
    # Vector Store
    "qdrant-client>=1.15.1",
    "fastembed>=0.7.1",
    
    # HTTP & Job Processing
    "httpx>=0.25.0",
    "redis>=5.0.0", 
    "celery>=5.3.0",
    
    # CLI & Logging
    "click>=8.1.0",
    "structlog>=23.1.0",
    
    # Utilities
    "tenacity>=8.2.0",
    "packaging>=23.0",
    
    # Security
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0", 
    "pytest-asyncio>=0.21.0",
    "httpx[testing]>=0.25.0",
    
    # Code Quality
    "black>=23.7.0",
    "ruff>=0.0.290",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    
    # Development Tools
    "ipython>=8.14.0",
    "rich>=13.5.0",
]

[project.urls]
Homepage = "https://github.com/spa-raj/ReleaseLens"
Documentation = "Todo"
Repository = "https://github.com/spa-raj/ReleaseLens"
"Bug Tracker" = "https://github.com/spa-raj/ReleaseLens/issues"

[project.scripts]
releaselens = "cli.main:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Tool configuration
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312", "py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["releaselens"]

[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
ignore_missing_imports = true
no_implicit_reexport = true
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = [
    "B101",  # assert_used - we use asserts in tests
    "B601",  # paramiko_calls - we may use paramiko for git operations
    "B602",  # subprocess_popen_with_shell_equals_true - needed for some git commands
]

[tool.pydocstyle]
convention = "google"
match-dir = "(?!tests).*"
add-ignore = [
    "D100",  # Missing docstring in public module
    "D104",  # Missing docstring in public package
]
